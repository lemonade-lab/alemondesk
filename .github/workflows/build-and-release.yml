name: Wails build

on:
  push:
    tags:
      - '*'

env:
  NODE_VERSION: "22.21.0"
  APP_NAME: "ALemonDesk"
  GO_VERSION: "1.24.0"

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        build:
          - name: 'ALemonDesk'
            platform: 'linux/amd64'
            nodePlatform: 'linux-x64'
            os: 'ubuntu-latest'
          - name: 'ALemonDesk'
            platform: 'windows/amd64'
            nodePlatform: 'win-x64'
            os: 'windows-latest'
          - name: 'ALemonDesk'
            platform: 'darwin/universal'
            nodePlatform: 'darwin-arm64'
            os: 'macos-latest'

    runs-on: ${{ matrix.build.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 安装 Go 环境
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
    
      - name: 安装缺失的依赖 (Linux)
        if: runner.os == 'ubuntu-latest'
        run: |
         sudo apt-get update
         sudo apt-get install -y \
         libgtk-3-dev \
         libwebkit2gtk-4.0-dev \
         libglib2.0-dev \
         pkg-config
          
      - name: 安装依赖并构建前端
        run: |
            yarn --cwd frontend install
            yarn --cwd frontend build

      - name: 安装模板依赖并压缩
        run: |
            yarn --cwd resources/template install
            tar -czf resources/template/node_modules.tar.gz -C resources/template node_modules

      - name: 删除 node_modules (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          rm -rf resources/template/node_modules

      - name: 删除 node_modules (Windows)
        if: runner.os == 'Windows'
        run: |
          Remove-Item resources/template/node_modules -Recurse -Force

      - name: 安装 Wails CLI
        if: runner.os == 'linux' || runner.os == 'macos-latest'
        run: |
          go install github.com/wailsapp/wails/v2/cmd/wails@latest
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH  # 将 Wails CLI 添加到 PATH

      - name: 安装 Wails CLI (Windows)
        if: runner.os == 'Windows'
        run: |
          go install github.com/wailsapp/wails/v2/cmd/wails@latest
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH  # 将 Wails CLI 添加到 PATH

      - name: 确认 Wails CLI 路径 (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "GOPATH: $(go env GOPATH)"
          echo "GOBIN: $(go env GOBIN)"
          echo "PATH: $env:PATH"
          wails --version  # 试图运行 wails 命令，查看是否能成功

      - name: Go mod tidy
        run: |
          go mod tidy

      - name: Build APP
        run: |
          wails build --clean

      - name: 重命名(Windows)
        if: runner.os == 'Windows'
        run: |
          Rename-Item "${{ matrix.build.name }}.exe" "${{ env.APP_NAME }}-${{ matrix.build.os }}-${{ matrix.build.platform }}.exe"

      - name: 重命名(Linux)
        if: runner.os == 'Linux'
        run: |
          mv "${{ matrix.build.name }}" "${{ env.APP_NAME }}-${{ matrix.build.os }}-${{ matrix.build.platform }}"

      - name: 重命名(macOS)
        if: runner.os == 'macOS'
        run: |
          zip -r "${{ env.APP_NAME }}-${{ matrix.build.os }}-${{ matrix.build.platform }}.zip" "${{ matrix.build.name }}.app"
          rm -rf "${{ matrix.build.name }}.app"

      - name: 上传构建产物
        uses: actions/upload-artifact@v5
        with:
          name: ${{ env.APP_NAME }}-${{ matrix.build.os }}-${{ matrix.build.platform }}
          path: ${{ env.APP_NAME }}-${{ matrix.build.os }}-${{ matrix.build.platform }}-*.{exe,zip,pkg}

  
  release:
    name: 创建发布
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: 下载所有构建产物
        uses: actions/download-artifact@v5
        with:
          path: artifacts

      - name: 创建 GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref_name }}
          files: artifacts/**/${{ env.APP_NAME }}-*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
